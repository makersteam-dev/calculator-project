{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\r\n", "window.Webflow ||= [];\r\nwindow.Webflow.push(() => {\r\n  window.Webflow ||= [];\r\n  window.Webflow.push(() => {\r\n    // save all the inputs as variables\r\n    const marketingBudget: HTMLInputElement = document.querySelector(\r\n      'input#Total-Marketing-Budget'\r\n    )!;\r\n    console.log(marketingBudget);\r\n    const marketingTeamSize: HTMLInputElement = document.querySelector(\r\n      'input#Marketing-Team-Size'\r\n    )!;\r\n\r\n    // Save all the inputs as variables\r\n    const paidSearchInput: HTMLInputElement = document.querySelector('input#paid-search')!;\r\n    const paidSocialInput: HTMLInputElement = document.querySelector('input#paid-social')!;\r\n    const affiliatesInput: HTMLInputElement = document.querySelector('input#affiliates')!;\r\n    const organicInput: HTMLInputElement = document.querySelector('input#organic')!;\r\n    const otherInput: HTMLInputElement = document.querySelector('input#other')!;\r\n\r\n    // Keep track of last checked input\r\n    let lastCheckedInput: HTMLInputElement | null = null;\r\n\r\n    // Add event listener to update otherInput value, check validity, and restrict input values\r\n    [paidSearchInput, paidSocialInput, affiliatesInput, organicInput].forEach((input) => {\r\n      input.addEventListener('input', () => {\r\n        let paidSearch: number = parseFloat(paidSearchInput.value) || 0;\r\n        let paidSocial: number = parseFloat(paidSocialInput.value) || 0;\r\n        let affiliates: number = parseFloat(affiliatesInput.value) || 0;\r\n        let organic: number = parseFloat(organicInput.value) || 0;\r\n\r\n        // Restrict input values to be within 0 and 100\r\n        paidSearch = Math.min(Math.max(paidSearch, 0), 100);\r\n        paidSocial = Math.min(Math.max(paidSocial, 0), 100);\r\n        affiliates = Math.min(Math.max(affiliates, 0), 100);\r\n        organic = Math.min(Math.max(organic, 0), 100);\r\n\r\n        const totalValue: number = paidSearch + paidSocial + affiliates + organic;\r\n\r\n        if (totalValue > 100) {\r\n          // Reset last checked input value to 0\r\n          if (lastCheckedInput) {\r\n            lastCheckedInput.value = '0';\r\n            lastCheckedInput = null;\r\n          }\r\n          // Recalculate total value and remaining value\r\n          paidSearch = parseFloat(paidSearchInput.value) || 0;\r\n          paidSocial = parseFloat(paidSocialInput.value) || 0;\r\n          affiliates = parseFloat(affiliatesInput.value) || 0;\r\n          organic = parseFloat(organicInput.value) || 0;\r\n          const remainingValue: number = 100 - (paidSearch + paidSocial + affiliates + organic);\r\n          otherInput.value = remainingValue.toString();\r\n        } else {\r\n          const remainingValue: number = 100 - totalValue;\r\n          otherInput.value = remainingValue.toString();\r\n          lastCheckedInput = input;\r\n        }\r\n\r\n        // Update input values after restriction\r\n        paidSearchInput.value = paidSearch.toString();\r\n        paidSocialInput.value = paidSocial.toString();\r\n        affiliatesInput.value = affiliates.toString();\r\n        organicInput.value = organic.toString();\r\n\r\n        // Change label color based on input value\r\n        const parentWrap = input.parentElement!.parentElement!;\r\n        const label = parentWrap.querySelector('.is--calc-label') as HTMLElement;\r\n        if (parseFloat(input.value) > 0) {\r\n          label.style.color = '#DC56F2';\r\n        } else {\r\n          label.style.color = '#FFFFFF';\r\n        }\r\n      });\r\n    });\r\n\r\n    // Initialize input values to 0\r\n    window.addEventListener('load', () => {\r\n      paidSearchInput.value = '0';\r\n      paidSocialInput.value = '0';\r\n      affiliatesInput.value = '0';\r\n      organicInput.value = '0';\r\n      otherInput.value = '0';\r\n\r\n      // Reset label colors on load\r\n      const labels = document.querySelectorAll('.is--calc-label');\r\n      labels.forEach((label) => {\r\n        (label as HTMLElement).style.color = '#FFFFFF';\r\n      });\r\n    });\r\n\r\n    const paidSearchSaving = 0.12;\r\n    const paidSocialSaving = 0.09;\r\n    const organicSaving = 0.05;\r\n    const affiliatesSaving = 0.08;\r\n    const managementConsultingSaving = 0.025;\r\n    const marketingAgencySaving = 0.012;\r\n    const costOfUsMarketingEmployee = 142700;\r\n    const hoursSaved = 0.28;\r\n    const resultElement: HTMLElement | null = document.querySelector('.final-value-text');\r\n\r\n    // checkboxes\r\n    const surveyToolsCheckbox: HTMLInputElement | null = document.querySelector(\r\n      'input[name=\"Survey-tools\"]'\r\n    );\r\n    const socialMonitoringCheckbox: HTMLInputElement | null = document.querySelector(\r\n      'input[name=\"Social-monitoring-tools\"]'\r\n    );\r\n    const crossChannelAttributionCheckbox: HTMLInputElement | null = document.querySelector(\r\n      'input[name=\"Cross-channel-attribution-tools\"]'\r\n    );\r\n    const competitiveIntelligenceCheckbox: HTMLInputElement | null = document.querySelector(\r\n      'input[name=\"Competitive-intelligence-tools\"]'\r\n    );\r\n    const marketingAgenciesCheckbox: HTMLInputElement | null = document.querySelector(\r\n      'input[name=\"Marketing-Agencies\"]'\r\n    );\r\n    const managementConsultingCheckbox: HTMLInputElement | null = document.querySelector(\r\n      'input[name=\"Management-Consulting\"]'\r\n    );\r\n\r\n    // Add event listener for surveyToolsCheckbox\r\n    surveyToolsCheckbox?.addEventListener('change', function (this: HTMLInputElement | null) {\r\n      if (this) {\r\n        // Add null check\r\n        // @ts-ignore\r\n        const surveyToolsCheckboxValue: string = this.checked ? '1' : '0';\r\n        // Rest of the code...\r\n      }\r\n    });\r\n\r\n    // Add event listener for socialMonitoringCheckbox\r\n    socialMonitoringCheckbox?.addEventListener('change', function (this: HTMLInputElement) {\r\n      // @ts-ignore\r\n      const socialMonitoringCheckboxValue: string = this.checked ? '1' : '0';\r\n    });\r\n\r\n    // Add event listener for crossChannelAttributionCheckbox\r\n    crossChannelAttributionCheckbox?.addEventListener('change', function (this: HTMLInputElement) {\r\n      // @ts-ignore\r\n      const crossChannelAttributionCheckboxValue: string = this.checked ? '1' : '0';\r\n    });\r\n\r\n    // Add event listener for competitiveIntelligenceCheckbox\r\n    competitiveIntelligenceCheckbox?.addEventListener('change', function (this: HTMLInputElement) {\r\n      // @ts-ignore\r\n      const competitiveIntelligenceCheckboxValue: string = this.checked ? '1' : '0';\r\n    });\r\n\r\n    // Add event listener for marketingAgenciesCheckbox\r\n    marketingAgenciesCheckbox?.addEventListener('change', function (this: HTMLInputElement) {\r\n      // @ts-ignore\r\n      const marketingAgenciesCheckboxValue: string = this.checked ? '1' : '0';\r\n    });\r\n\r\n    // Add event listener for managementConsultingCheckbox\r\n    managementConsultingCheckbox?.addEventListener('change', function (this: HTMLInputElement) {\r\n      // @ts-ignore\r\n      const managementConsultingCheckboxValue: string = this.checked ? '1' : '0';\r\n    });\r\n\r\n    // Add event listener for input changes\r\n    const inputs: NodeListOf<HTMLInputElement> = document.querySelectorAll('input');\r\n    function calculateValues() {\r\n      const marketingBudgetValue = parseFloat(marketingBudget.value);\r\n      const marketingTeamSizeValue = parseFloat(marketingTeamSize.value);\r\n      const paidSearch = parseFloat(paidSearchInput.value);\r\n      const paidSocial = parseFloat(paidSocialInput.value);\r\n      const affiliates = parseFloat(affiliatesInput.value);\r\n      const organic = parseFloat(organicInput.value);\r\n\r\n      const paidSearchPercentage = paidSearch / 100;\r\n      const paidSocialPercentage = paidSocial / 100;\r\n      const affiliatesPercentage = affiliates / 100;\r\n      const organicPercentage = organic / 100;\r\n      const surveyToolsCheckboxValue = surveyToolsCheckbox?.checked ? 1 : 0;\r\n      const socialMonitoringCheckboxValue = socialMonitoringCheckbox?.checked ? 1 : 0;\r\n      const crossChannelAttributionCheckboxValue = crossChannelAttributionCheckbox?.checked ? 1 : 0;\r\n      const competitiveIntelligenceCheckboxValue = competitiveIntelligenceCheckbox?.checked ? 1 : 0;\r\n      const marketingAgenciesCheckboxValue = marketingAgenciesCheckbox?.checked ? 1 : 0;\r\n      const managementConsultingCheckboxValue = managementConsultingCheckbox?.checked ? 1 : 0;\r\n\r\n      if (resultElement) {\r\n        const result =\r\n          marketingBudgetValue * paidSearchPercentage * paidSearchSaving +\r\n          marketingBudgetValue * paidSocialPercentage * paidSocialSaving +\r\n          marketingBudgetValue * affiliatesPercentage * affiliatesSaving +\r\n          marketingBudgetValue * organicPercentage * organicSaving +\r\n          competitiveIntelligenceCheckboxValue * 30000 +\r\n          surveyToolsCheckboxValue * 30000 +\r\n          socialMonitoringCheckboxValue * 30000 +\r\n          crossChannelAttributionCheckboxValue * 30000 +\r\n          managementConsultingCheckboxValue * managementConsultingSaving * marketingBudgetValue +\r\n          marketingAgenciesCheckboxValue * marketingAgencySaving * marketingBudgetValue +\r\n          marketingTeamSizeValue * hoursSaved * costOfUsMarketingEmployee;\r\n\r\n        resultElement.textContent = result.toLocaleString();\r\n      }\r\n    }\r\n    // Call calculateValues on window load\r\n    window.addEventListener('load', calculateValues);\r\n\r\n    // Call calculateValues whenever there is a change in any input\r\n    inputs.forEach(function (input) {\r\n      input.addEventListener('input', calculateValues);\r\n    });\r\n  });\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
